{"componentChunkName":"component---src-templates-doc-js","path":"/tutorial/blog/react/provider-login/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Provider Login\",\n  \"date\": \"2020-05-10\",\n  \"order\": 76\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When the user chose to log in using a provider like Google or Facebook and after the user allowing our blog to access his/her public data on the provider the user will be redirected to this page.\"), mdx(\"h2\", null, \"What You Will Learn Regarding Aventum?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Making a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"POST\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:3030/users/login/${provider}/provider\"), \" and put the token that extracted from the URL into the request body as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"token\"), \" will log the user in using that provider.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"containers\"), \" folder create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProviderLogin\"), \" folder and inside this one create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProviderLogin.js\"), \" file.\"), mdx(\"p\", null, \"At the top of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProviderLogin.js\"), \" file import the required modules:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\")), mdx(\"p\", null, \"Next define our main component function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=4 title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"highlight\": \"4\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\\nexport default function ProviderLogin({ onLogin }) {}\\n\")), mdx(\"p\", null, \"Next, we need to extract the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"provider\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"token\"), \" params from the URL:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The provider is a string like for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"facebook\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=5 title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"highlight\": \"5\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\\nexport default function ProviderLogin({ onLogin }) {\\n  let { token, provider } = useParams()\\n}\\n\")), mdx(\"p\", null, \"We also need the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history\"), \" to redirect the user to the frontend on success:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=6 title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"highlight\": \"6\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\\nexport default function ProviderLogin({ onLogin }) {\\n  let { token, provider } = useParams()\\n  let history = useHistory()\\n}\\n\")), mdx(\"p\", null, \"Next define our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loginWithProvider\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=8-30 title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"highlight\": \"8-30\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\\nexport default function ProviderLogin({ onLogin }) {\\n  let { token, provider } = useParams()\\n  let history = useHistory()\\n\\n  //Fetch public options\\n  const loginWithProvider = useCallback(async () => {\\n    const response = await fetch(\\n      `http://localhost:3030/users/login/${provider}/provider`,\\n      {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": token,\\n        },\\n      }\\n    )\\n\\n    localStorage.setItem(\\n      \\\"x-access-token\\\",\\n      response.headers.get(\\\"x-access-token\\\")\\n    )\\n\\n    let userData = await response.json()\\n    localStorage.setItem(\\\"user-data\\\", JSON.stringify(userData))\\n    onLogin(userData)\\n    history.push(\\\"/\\\")\\n  }, [])\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loginWithProvider\"), \" function will make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/users/login/${provider}/provider\"), \" and will put the token in the header as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \", on the success we receive the user authentication token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the response header so we save it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \" local storage item and the user's data in the response body and we save them to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-data\"), \" local storage item as well, finally we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onLogin\"), \" props function and passing the user's data to it then we redirect the user to the home page.\"), mdx(\"p\", null, \"We will call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loginWithProvider\"), \" inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" React hook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=32-36 title=src/containers/ProviderLogin/ProviderLogin.js\",\n    \"highlight\": \"32-36\",\n    \"title\": \"src/containers/ProviderLogin/ProviderLogin.js\"\n  }), \"import React, { useCallback, useEffect } from \\\"react\\\"\\nimport { useHistory, useParams } from \\\"react-router-dom\\\"\\n\\nexport default function ProviderLogin({ onLogin }) {\\n  let { token, provider } = useParams()\\n  let history = useHistory()\\n\\n  //Fetch public options\\n  const loginWithProvider = useCallback(async () => {\\n    const response = await fetch(\\n      `http://localhost:3030/users/login/${provider}/provider`,\\n      {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": token,\\n        },\\n      }\\n    )\\n\\n    localStorage.setItem(\\n      \\\"x-access-token\\\",\\n      response.headers.get(\\\"x-access-token\\\")\\n    )\\n\\n    let userData = await response.json()\\n    localStorage.setItem(\\\"user-data\\\", JSON.stringify(userData))\\n    onLogin(userData)\\n    history.push(\\\"/\\\")\\n  }, [])\\n\\n  useEffect(() => {\\n    loginWithProvider()\\n  }, [loginWithProvider])\\n\\n  return <div>Logging in...</div>\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-you-will-learn-regarding-aventum","title":"What You Will Learn Regarding Aventum?"}]},"frontmatter":{"title":"Provider Login"}}},"pageContext":{"slug":"/tutorial/blog/react/provider-login/","prev":{"fields":{"slug":"/tutorial/blog/react/email-confirmation/"},"frontmatter":{"title":"Email Confirmation"}},"next":{"fields":{"slug":"/tutorial/blog/react/profile/"},"frontmatter":{"title":"Profile"}}}},"staticQueryHashes":["681094712"]}