{"componentChunkName":"component---src-templates-doc-js","path":"/tutorial/blog/react/single-post-page/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Single Post Page\",\n  \"date\": \"2020-05-09\",\n  \"order\": 72\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What You Will Learn Regarding Aventum?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To create a new content item make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName\"), \" with the schema fields in the body of the request and the access token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the header of the request if the authentication/authorization is required to process the request.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To update a content item make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PATCH\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName/:itemId\"), \" with the schema fields in the body of the request and the access token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the header of the request if the authentication/authorization is required to process the request.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To delete a content item make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName/:itemId\"), \" with the access token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the header of the request if the authentication/authorization is required to process the request.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To get the first page/list of the post's comments we made a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/comments?query=${encodeURIComponent(JSON.stringify(query))}&page=1\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" object was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ where: { post: _postId } }\"), \"(Lean more about this query object \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../../docs/deep-dive/query/\"\n  }), \"here\"), \") what this query mean is get the comments where the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \" field/column is equal to this post id.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To fetch a single upload make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/uploads/:uploadId\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To fetch a single content item from the server make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName/:itemId\"), \".\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Our single post page will display all the post details, post comments, simple form to create/update comments, and delete comment button.\"), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"containers\"), \" folder create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" folder and inside this one create two files \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post.module.css\"), \".\"), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post.module.css\"), \" file put the following CSS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\",\n    \"metastring\": \"title=src/containers/Post/Post.module.css\",\n    \"title\": \"src/containers/Post/Post.module.css\"\n  }), \".postWrapper {\\n  margin-bottom: 3rem;\\n}\\n\\n.postWrapper img {\\n  max-width: 600px !important;\\n}\\n\\n.commentForm {\\n  display: none;\\n}\\n\\n.editLink {\\n  color: blue;\\n}\\n\\n.deleteLink {\\n  color: red;\\n}\\n\")), mdx(\"p\", null, \"At the top of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post.js\"), \" file import the required modules:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/containers/Post/Post.js\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\")), mdx(\"p\", null, \"Next create our main \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=5 title=src/containers/Post/Post.js\",\n    \"highlight\": \"5\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {}\\n\")), mdx(\"p\", null, \"Next we need to grab the post id from the URL's:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=6 title=src/containers/Post/Post.js\",\n    \"highlight\": \"6\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n}\\n\")), mdx(\"p\", null, \"We need to manage a few states in our component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=7-13 title=src/containers/Post/Post.js\",\n    \"highlight\": \"7-13\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"post\"), \" used to store the current post data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isUpdate\"), \" used to check if we are updating a comment or creating a new one.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"currentlyUpdatingComment\"), \" will store the data of the comment that we are updating.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"subject\"), \" to store the comment's subject for the comment that we are creating or updating.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"body\"), \" to store the comment's body for the comment that we are creating or updating.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"comments\"), \" to store the current post's comments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"featuredImage\"), \" to store the current post's featured image object.\")), mdx(\"p\", null, \"Next, create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"saveComment\"), \" function that we will use to save the comment's data on the server, we will use it to create a new comment or updating the existing one.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=15-61 title=src/containers/Post/Post.js\",\n    \"highlight\": \"15-61\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"This function will be fired on submitting the comment's form, we check if we are updating a comment or creating a new one, if we are updating we use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PATCH\"), \" request otherwise we use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request. We are including the user's token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the request header. And finally from the data that we received from the server we either adding a new comment to the comments list or updating the existing one using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setComments\"), \" function.\"), mdx(\"p\", null, \"Next we need a function to set the data of the updating comment on click on the update comment button:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=63-69 title=src/containers/Post/Post.js\",\n    \"highlight\": \"63-69\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n}\\n\")), mdx(\"p\", null, \"This function will be the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gets the comment data from the comment list(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const comment = comments.find(c => c.id == _id)\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sets the subject and body states to this comment's subject and body(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSubject(comment.subject)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setBody(comment.body)\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isUpdate\"), \" state equal to true(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setIsUpdate(true)\"), \"), because we are in updating comment process.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally sets the currently updating comment data(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setCurrentlyUpdatingComment(comment)\"), \").\")), mdx(\"p\", null, \"Now add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cancelUpdate\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=71-76 title=src/containers/Post/Post.js\",\n    \"highlight\": \"71-76\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n}\\n\")), mdx(\"p\", null, \"When we click on the cancel update button this function will fire to reverse the updating comment process to creating a new one.\"), mdx(\"p\", null, \"Now create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteComment\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=78-95 title=src/containers/Post/Post.js\",\n    \"highlight\": \"78-95\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"On click on the delete comment button, this function will fire to delete the comment.\"), mdx(\"p\", null, \"Next, create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPostComments\"), \" function that will be responsible to fetch the current post's comments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=97-108 title=src/containers/Post/Post.js\",\n    \"highlight\": \"97-108\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    let data = await response.json()\\n    setComments(data.contents)\\n  }\\n}\\n\")), mdx(\"p\", null, \"Next, create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getUpload\"), \" function that will be responsible to get the featured image data(like the URL) from the featured image id.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=110-115 title=src/containers/Post/Post.js\",\n    \"highlight\": \"110-115\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    let data = await response.json()\\n    setComments(data.contents)\\n  }\\n\\n  async function getUpload(_id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${_id}`)\\n\\n    let data = await response.json()\\n    setFeaturedImage(data)\\n  }\\n}\\n\")), mdx(\"p\", null, \"Next define the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPost\"), \" function that will be responsible to fetch current post data from the id:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=117-123 title=src/containers/Post/Post.js\",\n    \"highlight\": \"117-123\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    let data = await response.json()\\n    setComments(data.contents)\\n  }\\n\\n  async function getUpload(_id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${_id}`)\\n\\n    let data = await response.json()\\n    setFeaturedImage(data)\\n  }\\n\\n  //Fetch the post\\n  const getPost = useCallback(async _id => {\\n    const response = await fetch(`http://localhost:3030/posts/${_id}`)\\n    let data = await response.json()\\n    setPost(data)\\n    getUpload(data.content.featuredImage)\\n  }, [])\\n}\\n\")), mdx(\"p\", null, \"We will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" React hook to fetch the current post data and the post's comments:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=125-128 title=src/containers/Post/Post.js\",\n    \"highlight\": \"125-128\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    let data = await response.json()\\n    setComments(data.contents)\\n  }\\n\\n  async function getUpload(_id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${_id}`)\\n\\n    let data = await response.json()\\n    setFeaturedImage(data)\\n  }\\n\\n  //Fetch the post\\n  const getPost = useCallback(async _id => {\\n    const response = await fetch(`http://localhost:3030/posts/${_id}`)\\n    let data = await response.json()\\n    setPost(data)\\n    getUpload(data.content.featuredImage)\\n  }, [])\\n\\n  useEffect(() => {\\n    getPost(id)\\n    getPostComments(id)\\n  }, [getPost, id])\\n}\\n\")), mdx(\"p\", null, \"Finally it is the time to render everything:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=125-203 title=src/containers/Post/Post.js\",\n    \"highlight\": \"125-203\",\n    \"title\": \"src/containers/Post/Post.js\"\n  }), \"import React, { useEffect, useState, useCallback } from \\\"react\\\"\\nimport { useParams } from \\\"react-router-dom\\\"\\nimport classes from \\\"./Post.module.css\\\"\\n\\nexport default function Post({ user }) {\\n  let { id } = useParams()\\n  const [post, setPost] = useState()\\n  const [isUpdate, setIsUpdate] = useState(false)\\n  const [currentlyUpdatingComment, setCurrentlyUpdatingComment] = useState(null)\\n  const [subject, setSubject] = useState(\\\"\\\")\\n  const [body, setBody] = useState(\\\"\\\")\\n  const [comments, setComments] = useState([])\\n  const [featuredImage, setFeaturedImage] = useState()\\n\\n  const saveComment = async event => {\\n    event.preventDefault()\\n\\n    if (isUpdate) {\\n      const response = await fetch(\\n        `http://localhost:3030/comments/${currentlyUpdatingComment.id}`,\\n        {\\n          method: \\\"PATCH\\\",\\n          headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n          },\\n          body: JSON.stringify({\\n            subject,\\n            body,\\n            post: id,\\n          }),\\n        }\\n      )\\n\\n      let data = await response.json()\\n      setComments(oldComments =>\\n        oldComments.map(c => {\\n          if (c.id == currentlyUpdatingComment.id) {\\n            return data.content\\n          }\\n          return c\\n        })\\n      )\\n    } else {\\n      const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n        method: \\\"POST\\\",\\n        headers: {\\n          \\\"Content-Type\\\": \\\"application/json\\\",\\n          \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n        },\\n        body: JSON.stringify({\\n          subject,\\n          body,\\n          post: id,\\n        }),\\n      })\\n\\n      let data = await response.json()\\n      setComments(oldComments => [data, ...oldComments])\\n    }\\n  }\\n\\n  const setUpdateData = _id => {\\n    const comment = comments.find(c => c.id == _id)\\n    setSubject(comment.subject)\\n    setBody(comment.body)\\n    setIsUpdate(true)\\n    setCurrentlyUpdatingComment(comment)\\n  }\\n\\n  const cancelUpdate = () => {\\n    setSubject(\\\"\\\")\\n    setBody(\\\"\\\")\\n    setIsUpdate(false)\\n    setCurrentlyUpdatingComment(null)\\n  }\\n\\n  const deleteComment = async _id => {\\n    const response = await fetch(`http://localhost:3030/comments/${_id}`, {\\n      method: \\\"DELETE\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n    })\\n\\n    if (response.status === 200) {\\n      setComments(oldComments => oldComments.filter(c => c.id !== _id))\\n    }\\n  }\\n\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    let data = await response.json()\\n    setComments(data.contents)\\n  }\\n\\n  async function getUpload(_id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${_id}`)\\n\\n    let data = await response.json()\\n    setFeaturedImage(data)\\n  }\\n\\n  //Fetch the post\\n  const getPost = useCallback(async _id => {\\n    const response = await fetch(`http://localhost:3030/posts/${_id}`)\\n    let data = await response.json()\\n    setPost(data)\\n    getUpload(data.content.featuredImage)\\n  }, [])\\n\\n  useEffect(() => {\\n    getPost(id)\\n    getPostComments(id)\\n  }, [getPost, id])\\n\\n  return (\\n    <>\\n      <div className={classes.postWrapper}>\\n        {featuredImage && (\\n          <img src={featuredImage.path} alt={featuredImage.originalName} />\\n        )}\\n        {post && (\\n          <div>\\n            <h2>{post.content.title}</h2>\\n            <p>{post.content.body}</p>\\n          </div>\\n        )}\\n      </div>\\n      {user && (\\n        <form onSubmit={saveComment}>\\n          <div>\\n            <label htmlFor=\\\"subject\\\">Subject: </label>\\n            <input\\n              onChange={e => setSubject(e.target.value)}\\n              value={subject}\\n              type=\\\"text\\\"\\n              name=\\\"subject\\\"\\n              id=\\\"subject\\\"\\n              required\\n            />\\n          </div>\\n          <div>\\n            <label htmlFor=\\\"body\\\">Body: </label>\\n            <textarea\\n              onChange={e => setBody(e.target.value)}\\n              value={body}\\n              id=\\\"body\\\"\\n              name=\\\"body\\\"\\n              rows=\\\"4\\\"\\n              cols=\\\"50\\\"\\n            />\\n          </div>\\n          <div>\\n            {!isUpdate && <input type=\\\"submit\\\" value=\\\"Publish!\\\" />}\\n            {isUpdate && <input type=\\\"submit\\\" value=\\\"Update!\\\" />}\\n            {isUpdate && (\\n              <input\\n                onClick={cancelUpdate}\\n                type=\\\"button\\\"\\n                value=\\\"Cancel Update!\\\"\\n              />\\n            )}\\n          </div>\\n        </form>\\n      )}\\n      {comments.length ? (\\n        <div>\\n          <h2>Comments:</h2>\\n          {comments.map(c => {\\n            return (\\n              <div key={c.id}>\\n                <h3>{c.subject}</h3>\\n                <p>{c.body}</p>\\n                <div>\\n                  <button\\n                    className={classes.editLink}\\n                    onClick={() => setUpdateData(c.id)}\\n                  >\\n                    Update\\n                  </button>\\n                  /<button\\n                    className={classes.deleteLink}\\n                    onClick={() => deleteComment(c.id)}\\n                  >\\n                    Delete\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          })}\\n        </div>\\n      ) : null}\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-you-will-learn-regarding-aventum","title":"What You Will Learn Regarding Aventum?"}]},"frontmatter":{"title":"Single Post Page"}}},"pageContext":{"slug":"/tutorial/blog/react/single-post-page/","prev":{"fields":{"slug":"/tutorial/blog/react/home-page/"},"frontmatter":{"title":"Home Page"}},"next":{"fields":{"slug":"/tutorial/blog/react/login-page/"},"frontmatter":{"title":"Login Page"}}}},"staticQueryHashes":["681094712"]}