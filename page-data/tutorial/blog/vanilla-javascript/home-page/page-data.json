{"componentChunkName":"component---src-templates-doc-js","path":"/tutorial/blog/vanilla-javascript/home-page/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Home Page\",\n  \"date\": \"2020-05-02\",\n  \"order\": 57\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What You Will Learn Regarding Aventum?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To fetch any content page/list from Aventum's server we make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName?page=:pageNumber\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To get all uploads we make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/uploads/all\"), \" and to avoid garbing all the uploads you can specify what is the specifications of the uploads that you want by adding a query object to the URL like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/uploads/all?query=${encodeURIComponent( JSON.stringify(query) )}\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can lean more about this query object \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../../docs/deep-dive/query/\"\n  }, \"here\"), \".\"))), mdx(\"hr\", null), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Home\"), \" page will display a paginated list of clickable posts with their featured images, title, created at, updated at, created by, and updated by.\"), mdx(\"p\", null, \"Create index.html and put the following within it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Blog</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"lib/normalize.css\\\" />\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\" />\\n  </head>\\n  <body>\\n    <h1>The Awesome Blog</h1>\\n    <h2>Posts</h2>\\n    <script src=\\\"auth.js\\\"></script>\\n    <script src=\\\"index.js\\\"></script>\\n    <script src=\\\"header.js\\\"></script>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"We discussed earlier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header.js\"), \" files in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../\"\n  }, \"introduction\"), \" section, now lets explain what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file do.\"), mdx(\"p\", null, \"Create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file with a self-invoking anonymous function inside it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \";(async function() {})()\\n\")), mdx(\"p\", null, \"We first need to grab the page number from the URL so go ahead and add the following code to our function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=2-4\",\n    \"highlight\": \"2-4\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n})()\\n\")), mdx(\"p\", null, \"Next create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPosts\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=6-12\",\n    \"highlight\": \"6-12\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n})()\\n\")), mdx(\"p\", null, \"The work of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPosts\"), \" function is very simple which is just making a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to the Aventum server and grab the required posts page.\"), mdx(\"p\", null, \"In the post object we will get only the featured image id which is the upload id, Aventum adds a record for each file get uploaded to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uploads\"), \" table/collection contains the upload info, so we need a function to grab the featured images objects which will contains the path/URL of the image in order to display them, create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getUploadsInIds\"), \" function as the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=14-24\",\n    \"highlight\": \"14-24\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  //Fetch the features images\\n  async function getUploadsInIds(ids) {\\n    let query = { whereIn: { column: \\\"id\\\", values: ids } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/uploads/all?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n})()\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getUploadsInIds\"), \" function receives the uploads ids(in our case the featured images ids) and adds them to the query object \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ whereIn: { column: \\\"id\\\", values: ids } }\"), \" what this query object means is to tell the Aventum server to grab only the uploads where their ids in the given ids array.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Lean more about this query object \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../../../docs/deep-dive/query/\"\n  }, \"here\"), \".\")), mdx(\"p\", null, \"Next, fetch the posts using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPosts\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=26\",\n    \"highlight\": \"26\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  //Fetch the features images\\n  async function getUploadsInIds(ids) {\\n    let query = { whereIn: { column: \\\"id\\\", values: ids } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/uploads/all?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const posts = await getPosts()\\n})()\\n\")), mdx(\"p\", null, \"Now grab the featured image ids and get their data by getting the uploads that these featured image ids belong to.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=28-31\",\n    \"highlight\": \"28-31\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  //Fetch the features images\\n  async function getUploadsInIds(ids) {\\n    let query = { whereIn: { column: \\\"id\\\", values: ids } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/uploads/all?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const posts = await getPosts()\\n\\n  const allFeaturedImagesIds = posts.contents.map(p => p.featuredImage)\\n\\n  const uploads = await getUploadsInIds(allFeaturedImagesIds)\\n  const featuredImages = uploads.uploads\\n})()\\n\")), mdx(\"p\", null, \"Now render the post list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=33-70\",\n    \"highlight\": \"33-70\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  //Fetch the features images\\n  async function getUploadsInIds(ids) {\\n    let query = { whereIn: { column: \\\"id\\\", values: ids } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/uploads/all?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const posts = await getPosts()\\n\\n  const allFeaturedImagesIds = posts.contents.map(p => p.featuredImage)\\n\\n  const uploads = await getUploadsInIds(allFeaturedImagesIds)\\n  const featuredImages = uploads.uploads\\n\\n  //render the posts list\\n  var ul = document.createElement(\\\"ul\\\")\\n  ul.setAttribute(\\\"id\\\", \\\"post-list\\\")\\n\\n  for (const post of posts.contents) {\\n    const postFeaturedImage = featuredImages.find(\\n      f => f.id === post.featuredImage\\n    )\\n    const link = document.createElement(\\\"a\\\")\\n    link.href = `${window.location.pathname.replace(\\n      \\\"index.html\\\",\\n      \\\"post.html\\\"\\n    )}?id=${post.id}`\\n    ul.appendChild(link)\\n\\n    const li = document.createElement(\\\"li\\\")\\n    link.appendChild(li)\\n    const title = document.createElement(\\\"h2\\\")\\n    title.innerHTML = post.title\\n    const createdAt = document.createElement(\\\"div\\\")\\n    createdAt.innerHTML = `Created At: ${post.createdAt}`\\n    const createdBy = document.createElement(\\\"div\\\")\\n    createdBy.innerHTML = `Created By: ${post.createdBy}`\\n    const updatedAt = document.createElement(\\\"div\\\")\\n    updatedAt.innerHTML = `Updated At: ${post.updatedAt}`\\n    const updatedBy = document.createElement(\\\"div\\\")\\n    updatedBy.innerHTML = `Updated By: ${post.updatedBy}`\\n    const featuredImage = document.createElement(\\\"img\\\")\\n    featuredImage.src = postFeaturedImage.path\\n    featuredImage.alt = postFeaturedImage.originalName\\n    li.appendChild(featuredImage)\\n    li.appendChild(title)\\n    li.appendChild(createdAt)\\n    li.appendChild(updatedAt)\\n    li.appendChild(createdBy)\\n    li.appendChild(updatedBy)\\n  }\\n  document.body.appendChild(ul)\\n})()\\n\")), mdx(\"p\", null, \"Finally, render the pagination.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=72-96\",\n    \"highlight\": \"72-96\"\n  }, \";(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPage = Number(urlParams.get(\\\"page\\\")) || 1\\n\\n  //Fetch the posts\\n  async function getPosts() {\\n    const response = await fetch(\\n      `http://localhost:3030/posts?page=${currentPage}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  //Fetch the features images\\n  async function getUploadsInIds(ids) {\\n    let query = { whereIn: { column: \\\"id\\\", values: ids } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/uploads/all?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const posts = await getPosts()\\n\\n  const allFeaturedImagesIds = posts.contents.map(p => p.featuredImage)\\n\\n  const uploads = await getUploadsInIds(allFeaturedImagesIds)\\n  const featuredImages = uploads.uploads\\n\\n  //render the posts list\\n  var ul = document.createElement(\\\"ul\\\")\\n  ul.setAttribute(\\\"id\\\", \\\"post-list\\\")\\n\\n  for (const post of posts.contents) {\\n    const postFeaturedImage = featuredImages.find(\\n      f => f.id === post.featuredImage\\n    )\\n    const link = document.createElement(\\\"a\\\")\\n    link.href = `${window.location.pathname.replace(\\n      \\\"index.html\\\",\\n      \\\"post.html\\\"\\n    )}?id=${post.id}`\\n    ul.appendChild(link)\\n\\n    const li = document.createElement(\\\"li\\\")\\n    link.appendChild(li)\\n    const title = document.createElement(\\\"h2\\\")\\n    title.innerHTML = post.title\\n    const createdAt = document.createElement(\\\"div\\\")\\n    createdAt.innerHTML = `Created At: ${post.createdAt}`\\n    const createdBy = document.createElement(\\\"div\\\")\\n    createdBy.innerHTML = `Created By: ${post.createdBy}`\\n    const updatedAt = document.createElement(\\\"div\\\")\\n    updatedAt.innerHTML = `Updated At: ${post.updatedAt}`\\n    const updatedBy = document.createElement(\\\"div\\\")\\n    updatedBy.innerHTML = `Updated By: ${post.updatedBy}`\\n    const featuredImage = document.createElement(\\\"img\\\")\\n    featuredImage.src = postFeaturedImage.path\\n    featuredImage.alt = postFeaturedImage.originalName\\n    li.appendChild(featuredImage)\\n    li.appendChild(title)\\n    li.appendChild(createdAt)\\n    li.appendChild(updatedAt)\\n    li.appendChild(createdBy)\\n    li.appendChild(updatedBy)\\n  }\\n  document.body.appendChild(ul)\\n\\n  /**\\n   * Render the pagination\\n   */\\n  //We will only render the pagination if we have more than one page\\n  if (posts.pagination.totalPages > 1) {\\n    const paginationWrapper = document.createElement(\\\"div\\\")\\n    paginationWrapper.setAttribute(\\\"id\\\", \\\"pagination-wrapper\\\")\\n    for (\\n      let pageNumber = 1;\\n      pageNumber <= posts.pagination.totalPages;\\n      pageNumber++\\n    ) {\\n      const link = document.createElement(\\\"a\\\")\\n\\n      // Add active class to the current page link\\n      if (pageNumber === currentPage) {\\n        link.setAttribute(\\\"class\\\", \\\"active\\\")\\n      }\\n      link.href = `${window.location.pathname}?page=${pageNumber}`\\n      link.innerHTML = pageNumber\\n      paginationWrapper.appendChild(link)\\n    }\\n\\n    document.body.appendChild(paginationWrapper)\\n  }\\n})()\\n\")), mdx(\"p\", null, \"That is it, the above code is what the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file contains.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-you-will-learn-regarding-aventum","title":"What You Will Learn Regarding Aventum?"}]},"frontmatter":{"title":"Home Page"}}},"pageContext":{"slug":"/tutorial/blog/vanilla-javascript/home-page/","prev":{"fields":{"slug":"/tutorial/blog/vanilla-javascript/"},"frontmatter":{"title":"Introduction"}},"next":{"fields":{"slug":"/tutorial/blog/vanilla-javascript/login-page/"},"frontmatter":{"title":"Login Page"}}}},"staticQueryHashes":["681094712"]}