{"componentChunkName":"component---src-templates-doc-js","path":"/tutorial/blog/vanilla-javascript/single-post-page/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Single Post Page\",\n  \"date\": \"2020-05-02\",\n  \"order\": 59\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What You Will Learn Regarding Aventum?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To create a new content item make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName\"), \" with the schema fields in the body of the request and the access token(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-access-token\"), \") in the header of the request if the authentication/authorization is required to process the request.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To get the first page/list of the post's comments we made a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/comments?query=${encodeURIComponent(JSON.stringify(query))}&page=1\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" object was equal to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ where: { post: _postId } }\"), \"(Lean more about this query object \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../../docs/deep-dive/query/\"\n  }), \"here\"), \").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To fetch a single content item from the server make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/:schemaPluralName\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To fetch a single upload make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3030/uploads/:uploadId\"), \".\"))), mdx(\"hr\", null), mdx(\"p\", null, \"As you can call when we click on a post on our home page we redirected to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.html?id=:id\"), \" now it is the time to create this post page.\"), mdx(\"p\", null, \"Our post page will simply display all the post details, post comments, and a simple form to submit new comments.\"), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.html\"), \" and put the following into it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Post</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"lib/normalize.css\\\" />\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\" />\\n  </head>\\n  <body>\\n    <h1>The Awesome Blog</h1>\\n    <script src=\\\"auth.js\\\"></script>\\n    <script src=\\\"post.js\\\"></script>\\n    <script src=\\\"header.js\\\"></script>\\n    <form action=\\\"\\\" method=\\\"get\\\" id=\\\"comment-form\\\">\\n      <div class=\\\"field-wrapper\\\">\\n        <label for=\\\"subject\\\">Subject: </label>\\n        <input type=\\\"text\\\" name=\\\"subject\\\" id=\\\"subject\\\" required />\\n      </div>\\n      <div class=\\\"field-wrapper\\\">\\n        <label for=\\\"body\\\">Body: </label>\\n        <textarea id=\\\"body\\\" name=\\\"body\\\" rows=\\\"4\\\" cols=\\\"50\\\"></textarea>\\n      </div>\\n      <div class=\\\"field-wrapper\\\">\\n        <input type=\\\"submit\\\" value=\\\"Publish!\\\" />\\n      </div>\\n    </form>\\n  </body>\\n</html>\\n\")), mdx(\"p\", null, \"It is a simple HTML code with a simple form.\"), mdx(\"p\", null, \"Now let's create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post.js\"), \" file and create our first function within it which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUpCommentFormSubmission\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"async function setUpCommentFormSubmission(postId) {}\\n\")), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUpCommentFormSubmission\"), \" function we will have a closure function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publishComment\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=2-13\",\n    \"highlight\": \"2-13\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n}\\n\")), mdx(\"p\", null, \"When the user submits the comment form this function will make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to the server with comment data in order to create a new comment.\"), mdx(\"p\", null, \"Next, add the event listener to the form, so when someone submits it calls the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publishComment\"), \" function to create a new comment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=15-30\",\n    \"highlight\": \"15-30\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\")), mdx(\"p\", null, \"Next, create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderCommentsList\"), \" function which will be responsible to render the comments list only.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=33-56\",\n    \"highlight\": \"33-56\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\")), mdx(\"p\", null, \"What the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderCommentsList\"), \" function is doing is very simple, it takes the comments list and renders them on the page.\"), mdx(\"p\", null, \"Next create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderComments\"), \" function, this function will get the post's comments, set up the form for submissions by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUpCommentFormSubmission\"), \", and render the comments list by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderCommentsList\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=58-76\",\n    \"highlight\": \"58-76\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\\nasync function renderComments(postId) {\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const comments = await getPostComments(postId)\\n\\n  setUpCommentFormSubmission(postId)\\n\\n  await renderCommentsList(comments.contents)\\n}\\n\")), mdx(\"p\", null, \"Next, let's create our self invoking anonymous function that will make everything starts.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=78\",\n    \"highlight\": \"78\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\\nasync function renderComments(postId) {\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const comments = await getPostComments(postId)\\n\\n  setUpCommentFormSubmission(postId)\\n\\n  await renderCommentsList(comments.contents)\\n}\\n\\n;(async function() {})()\\n\")), mdx(\"p\", null, \"In our self invoking anonymous function we first grab the post id and create two functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPost\"), \" to get the current post details and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getUpload\"), \" to retrieve the post featured image details.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=79-92\",\n    \"highlight\": \"79-92\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\\nasync function renderComments(postId) {\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const comments = await getPostComments(postId)\\n\\n  setUpCommentFormSubmission(postId)\\n\\n  await renderCommentsList(comments.contents)\\n}\\n\\n;(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPostId = urlParams.get(\\\"id\\\")\\n\\n  //Fetch the post\\n  async function getPost(id) {\\n    const response = await fetch(`http://localhost:3030/posts/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  async function getUpload(id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n})()\\n\")), mdx(\"p\", null, \"Next, we get the post details, featured image, and render the comments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=94-115\",\n    \"highlight\": \"94-115\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\\nasync function renderComments(postId) {\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const comments = await getPostComments(postId)\\n\\n  setUpCommentFormSubmission(postId)\\n\\n  await renderCommentsList(comments.contents)\\n}\\n\\n;(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPostId = urlParams.get(\\\"id\\\")\\n\\n  //Fetch the post\\n  async function getPost(id) {\\n    const response = await fetch(`http://localhost:3030/posts/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  async function getUpload(id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const post = await getPost(currentPostId)\\n  const postFeaturedImage = await getUpload(post.content.featuredImage)\\n\\n  const postWrapper = document.createElement(\\\"div\\\")\\n  postWrapper.setAttribute(\\\"id\\\", \\\"post-wrapper\\\")\\n\\n  const featuredImage = document.createElement(\\\"img\\\")\\n  featuredImage.src = postFeaturedImage.path\\n  featuredImage.alt = postFeaturedImage.originalName\\n  postWrapper.appendChild(featuredImage)\\n\\n  const title = document.createElement(\\\"h2\\\")\\n  title.innerHTML = post.content.title\\n  postWrapper.appendChild(title)\\n\\n  const body = document.createElement(\\\"p\\\")\\n  body.innerHTML = post.content.body\\n  postWrapper.appendChild(body)\\n\\n  document.body.insertBefore(postWrapper, document.querySelector(\\\"form\\\"))\\n\\n  renderComments(currentPostId)\\n})()\\n\")), mdx(\"p\", null, \"Finally, we get the current logged in user details, if the user is logged in we display the comments form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"highlight=117-121\",\n    \"highlight\": \"117-121\"\n  }), \"async function setUpCommentFormSubmission(postId) {\\n  async function publishComment(data = {}) {\\n    const response = await fetch(\\\"http://localhost:3030/comments\\\", {\\n      method: \\\"POST\\\",\\n      headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"x-access-token\\\": localStorage.getItem(\\\"x-access-token\\\"),\\n      },\\n      body: JSON.stringify(data),\\n    })\\n\\n    return response.json()\\n  }\\n\\n  const form = document.querySelector(\\\"form\\\")\\n  form.addEventListener(\\\"submit\\\", async event => {\\n    event.preventDefault()\\n    const subject = event.currentTarget.querySelector(\\\"#subject\\\").value\\n    const body = event.currentTarget.querySelector(\\\"#body\\\").value\\n\\n    const data = {\\n      subject,\\n      body,\\n      post: postId,\\n    }\\n\\n    const comment = await publishComment(data)\\n\\n    location.reload()\\n  })\\n}\\n\\nasync function renderCommentsList(comments) {\\n  const listWrapper = document.createElement(\\\"div\\\")\\n  listWrapper.setAttribute(\\\"id\\\", \\\"comments-list\\\")\\n  if (comments.length) {\\n    const commentListHeader = document.createElement(\\\"h2\\\")\\n    commentListHeader.innerHTML = \\\"Comments:\\\"\\n    listWrapper.appendChild(commentListHeader)\\n  }\\n\\n  for (const comment of comments) {\\n    const commentWrapper = document.createElement(\\\"div\\\")\\n\\n    const subject = document.createElement(\\\"h3\\\")\\n    subject.innerHTML = comment.subject\\n    commentWrapper.appendChild(subject)\\n\\n    const body = document.createElement(\\\"p\\\")\\n    body.innerHTML = comment.body\\n    commentWrapper.appendChild(body)\\n\\n    listWrapper.appendChild(commentWrapper)\\n  }\\n  document.body.appendChild(listWrapper)\\n}\\n\\nasync function renderComments(postId) {\\n  //Fetch post's comments\\n  async function getPostComments(_postId) {\\n    let query = { where: { post: _postId } }\\n\\n    const response = await fetch(\\n      `http://localhost:3030/comments?query=${encodeURIComponent(\\n        JSON.stringify(query)\\n      )}&page=1`\\n    )\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const comments = await getPostComments(postId)\\n\\n  setUpCommentFormSubmission(postId)\\n\\n  await renderCommentsList(comments.contents)\\n}\\n\\n;(async function() {\\n  //Get the current page number from the url\\n  const urlParams = new URLSearchParams(window.location.search)\\n  const currentPostId = urlParams.get(\\\"id\\\")\\n\\n  //Fetch the post\\n  async function getPost(id) {\\n    const response = await fetch(`http://localhost:3030/posts/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  async function getUpload(id) {\\n    const response = await fetch(`http://localhost:3030/uploads/${id}`)\\n    return response.json() // parses JSON response into native JavaScript objects\\n  }\\n\\n  const post = await getPost(currentPostId)\\n  const postFeaturedImage = await getUpload(post.content.featuredImage)\\n\\n  const postWrapper = document.createElement(\\\"div\\\")\\n  postWrapper.setAttribute(\\\"id\\\", \\\"post-wrapper\\\")\\n\\n  const featuredImage = document.createElement(\\\"img\\\")\\n  featuredImage.src = postFeaturedImage.path\\n  featuredImage.alt = postFeaturedImage.originalName\\n  postWrapper.appendChild(featuredImage)\\n\\n  const title = document.createElement(\\\"h2\\\")\\n  title.innerHTML = post.content.title\\n  postWrapper.appendChild(title)\\n\\n  const body = document.createElement(\\\"p\\\")\\n  body.innerHTML = post.content.body\\n  postWrapper.appendChild(body)\\n\\n  document.body.insertBefore(postWrapper, document.querySelector(\\\"form\\\"))\\n\\n  renderComments(currentPostId)\\n\\n  const currentUser = await getCurrentUser()\\n\\n  if (currentUser) {\\n    document.querySelector(\\\"form\\\").style.display = \\\"flex\\\"\\n  }\\n})()\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-you-will-learn-regarding-aventum","title":"What You Will Learn Regarding Aventum?"}]},"frontmatter":{"title":"Single Post Page"}}},"pageContext":{"slug":"/tutorial/blog/vanilla-javascript/single-post-page/","prev":{"fields":{"slug":"/tutorial/blog/vanilla-javascript/login-page/"},"frontmatter":{"title":"Login Page"}},"next":{"fields":{"slug":"/tutorial/blog/vanilla-javascript/registration-page/"},"frontmatter":{"title":"Registration Page"}}}},"staticQueryHashes":["681094712"]}